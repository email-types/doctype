import { EOL } from 'os';
import { resolve } from 'path';
import { outputFile } from 'fs-extra';
import { format, resolveConfig } from 'prettier';
import { cyan, green, red } from 'colors';
import { doctypes as rawDoctypes, Doctype } from '@email-types/data/doctypes';

const cwd = process.cwd();
const output = resolve(__dirname, '../src/data.ts');

const orderedKeys: (keyof Doctype)[] = [
  'element',
  'keyword',
  'publicIdentifier',
  'systemIdentifier',
];

const toKebabCase = (value: string): string => {
  return value.toLowerCase().replace(/\s/g, '-');
};

const coerce = (doctype: Doctype): string => {
  const dtd = orderedKeys.reduce((acc, key) => {
    const value = doctype[key];

    if (!value) return acc;

    if (key === 'publicIdentifier' || key === 'systemIdentifier') {
      return `${acc} "${value}"`;
    }

    return `${acc} ${value}`;
  }, '');

  return `<!DOCTYPE${dtd}>`;
};

const versions: string[] = [];
const doctypes = rawDoctypes.reduce<Record<string, string>>((acc, doctype) => {
  const key = toKebabCase(doctype.name);
  versions.push(`'${key}'`);
  acc[key] = coerce(doctype);
  return acc;
}, {});

doctypes.recommended = doctypes['xhtml-1.0-transitional'];
versions.push(`'recommended'`);

const data = [
  '/* This file is automatically generated and should not be edited directly. */',
  `export type Version = ${versions.join(' | ')};`,
  `export const doctypes: Record<Version, string> = ${JSON.stringify(
    doctypes,
  )};`,
].join(`${EOL}${EOL}`);

(async (): Promise<void> => {
  try {
    console.log(`${cyan('[ info ]')} generating data...`);
    const config = await resolveConfig(cwd);
    const content = format(data, {
      parser: 'typescript',
      ...config,
    });

    await outputFile(output, content.replace(/\n/g, EOL));
    console.log(`${green('[ done ]')} successfully generated data`);
  } catch (err) {
    console.log(`${red('[ error ]')} ${err}`);
    process.exit(0);
  }
})();
